// Copyright (c) 2010-2013 AlphaSierraPapa for the SharpDevelop Team
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Xml;
using ICSharpCode.NRefactory.Editor;
using ICSharpCode.NRefactory.TypeSystem;

namespace ICSharpCode.NRefactory.Documentation
{
    /// <summary>
    /// Provides documentation from an .xml file content (as generated by the Microsoft C# compiler).
    /// </summary>
    /// <remarks>
    /// This class is a modification of <see cref="XmlDocumentationProvider"/>, simplified to use an array of bytes
    /// as a source for the XML documentation data. It creates instances of <see cref="MemoryStream"/> ad hoc,
    /// because the used <see cref="XmlTextReader"/> closes them everytime, which complicates the workflow.
    /// </remarks>
    [Serializable]
	public class MemoryXmlDocumentationProvider : IDocumentationProvider, IDeserializationCallback
	{
		#region Cache
		sealed class XmlDocumentationCache
		{
			readonly KeyValuePair<string, string>[] entries;
			int pos;
			
			public XmlDocumentationCache(int size = 50)
			{
				if (size <= 0)
					throw new ArgumentOutOfRangeException("size", size, "Value must be positive");
				this.entries = new KeyValuePair<string, string>[size];
			}
			
			internal bool TryGet(string key, out string value)
			{
				foreach (var pair in entries) {
					if (pair.Key == key) {
						value = pair.Value;
						return true;
					}
				}
				value = null;
				return false;
			}
			
			internal void Add(string key, string value)
			{
				entries[pos++] = new KeyValuePair<string, string>(key, value);
				if (pos == entries.Length)
					pos = 0;
			}
		}
		#endregion
		
		[Serializable]
		struct IndexEntry : IComparable<IndexEntry>
		{
			/// <summary>
			/// Hash code of the documentation tag
			/// </summary>
			internal readonly int HashCode;
			
			/// <summary>
			/// Position in the .xml file where the documentation starts
			/// </summary>
			internal readonly int PositionInFile;
			
			internal IndexEntry(int hashCode, int positionInFile)
			{
				this.HashCode = hashCode;
				this.PositionInFile = positionInFile;
			}
			
			public int CompareTo(IndexEntry other)
			{
				return this.HashCode.CompareTo(other.HashCode);
			}
		}
		
		[NonSerialized]
		XmlDocumentationCache cache = new XmlDocumentationCache();

        private readonly byte[] dataBuffer;
        private readonly int dataLength;
		readonly Encoding encoding;
        volatile IndexEntry[] index; // SORTED array of index entries

        #region Constructor
        /// <summary>
        /// Creates a new XmlDocumentationProvider.
        /// </summary>
        /// <param name="fileName">Name of the .xml file.</param>
        /// <exception cref="XmlException">Invalid XML file</exception>
        public MemoryXmlDocumentationProvider(byte[] dataBuffer, int dataLength)
		{
            this.dataBuffer = dataBuffer;
            this.dataLength = dataLength;

            using (MemoryStream ms = new MemoryStream(dataBuffer, 0, dataLength, false))
            using (XmlTextReader xmlReader = new XmlTextReader(ms)) {
                xmlReader.XmlResolver = null; // no DTD resolving
                xmlReader.MoveToContent();
                if (string.IsNullOrEmpty(xmlReader.GetAttribute("redirect"))) {
                    this.encoding = xmlReader.Encoding;
                    ReadXmlDoc(xmlReader);
                }
                else {
                    throw new XmlException("XmlDoc is redirecting to " + xmlReader.GetAttribute("redirect") + ", which is not supported.");
                }
            }
		}
		#endregion
		
		#region Load / Create Index
		void ReadXmlDoc(XmlTextReader reader)
		{
			// Open up a second stream for the line<->position mapping
            using (MemoryStream ms = new MemoryStream(dataBuffer, 0, dataLength, false)) {
				LinePositionMapper linePosMapper = new LinePositionMapper(ms, encoding);
				List<IndexEntry> indexList = new List<IndexEntry>();
				while (reader.Read()) {
					if (reader.IsStartElement()) {
						switch (reader.LocalName) {
							case "members":
								ReadMembersSection(reader, linePosMapper, indexList);
								break;
						}
					}
				}
				indexList.Sort();
				this.index = indexList.ToArray(); // volatile write
			}
		}
		
		sealed class LinePositionMapper
		{
			readonly MemoryStream ms;
			readonly Decoder decoder;
			int currentLine = 1;
			
			// buffers for use with Decoder:
			byte[] input = new byte[1];
			char[] output = new char[1];
			
			public LinePositionMapper(MemoryStream ms, Encoding encoding)
			{
				this.decoder = encoding.GetDecoder();
				this.ms = ms;
			}
			
			public int GetPositionForLine(int line)
			{
				Debug.Assert(line >= currentLine);
				while (line > currentLine) {
					int b = ms.ReadByte();
					if (b < 0)
						throw new EndOfStreamException();
					int bytesUsed, charsUsed;
					bool completed;
					input[0] = (byte)b;
					decoder.Convert(input, 0, 1, output, 0, 1, false, out bytesUsed, out charsUsed, out completed);
					Debug.Assert(bytesUsed == 1);
					if (charsUsed == 1 && output[0] == '\n') {
						currentLine++;
					}
				}
				return checked((int)ms.Position);
			}
		}
		
		static void ReadMembersSection(XmlTextReader reader, LinePositionMapper linePosMapper, List<IndexEntry> indexList)
		{
			while (reader.Read()) {
				switch (reader.NodeType) {
					case XmlNodeType.EndElement:
						if (reader.LocalName == "members") {
							return;
						}
						break;
					case XmlNodeType.Element:
						if (reader.LocalName == "member") {
							int pos = linePosMapper.GetPositionForLine(reader.LineNumber) + Math.Max(reader.LinePosition - 2, 0);
							string memberAttr = reader.GetAttribute("name");
							if (memberAttr != null)
								indexList.Add(new IndexEntry(GetHashCode(memberAttr), pos));
							reader.Skip();
						}
						break;
				}
			}
		}
		
		/// <summary>
		/// Hash algorithm used for the index.
		/// This is a custom implementation so that old index files work correctly
		/// even when the .NET string.GetHashCode implementation changes
		/// (e.g. due to .NET 4.5 hash randomization)
		/// </summary>
		static int GetHashCode(string key)
		{
			unchecked {
				int h = 0;
				foreach (char c in key) {
					h = (h << 5) - h + c;
				}
				return h;
			}
		}
		#endregion
		
		#region GetDocumentation
		/// <summary>
		/// Get the documentation for the member with the specified documentation key.
		/// </summary>
		public string GetDocumentation(string key)
		{
			if (key == null)
				throw new ArgumentNullException("key");
			return GetDocumentation(key, false);
		}
		
		string GetDocumentation(string key, bool allowReload)
		{
			int hashcode = GetHashCode(key);
			var index = this.index; // read volatile field
			// index is sorted, so we can use binary search
			int m = Array.BinarySearch(index, new IndexEntry(hashcode, 0));
			if (m < 0)
				return null;
			// correct hash code found.
			// possibly there are multiple items with the same hash, so go to the first.
			while (--m >= 0 && index[m].HashCode == hashcode);
			// m is now 1 before the first item with the correct hash
			
			XmlDocumentationCache cache = this.cache;
			lock (cache) {
				string val;
				if (!cache.TryGet(key, out val)) {
					try {
						// go through all items that have the correct hash
						while (++m < index.Length && index[m].HashCode == hashcode) {
							val = LoadDocumentation(key, index[m].PositionInFile);
							if (val != null)
								break;
						}
						// cache the result (even if it is null)
						cache.Add(key, val);
					} catch (XmlException) {
						// may happen if the documentation file was changed so that the file position no longer starts on a valid XML element
						return null;
					}
				}
				return val;
			}
		}
		#endregion
		
		#region GetDocumentation for entity
		/// <inheritdoc/>
		public DocumentationComment GetDocumentation(IEntity entity)
		{
			string xmlDoc = GetDocumentation(IdStringProvider.GetIdString(entity));
			if (xmlDoc != null) {
				return new DocumentationComment(new StringTextSource(xmlDoc), new SimpleTypeResolveContext(entity));
			} else {
				return null;
			}
		}
		#endregion
		
		#region Load / Read XML
		string LoadDocumentation(string key, int positionInFile)
		{
            using (MemoryStream ms = new MemoryStream(dataBuffer, 0, dataLength, false)) {
                ms.Position = positionInFile;

                var context = new XmlParserContext(null, null, null, XmlSpace.None) { Encoding = encoding };
                using (XmlTextReader r = new XmlTextReader(ms, XmlNodeType.Element, context)) {
                    r.XmlResolver = null; // no DTD resolving
                    while (r.Read()) {
                        if (r.NodeType == XmlNodeType.Element) {
                            string memberAttr = r.GetAttribute("name");
                            if (memberAttr == key) {
                                return r.ReadInnerXml();
                            }
                            else {
                                return null;
                            }
                        }
                    }
                    return null;
                }
            }
		}
		#endregion
		
		public virtual void OnDeserialization(object sender)
		{
			cache = new XmlDocumentationCache();
		}
    }
}
